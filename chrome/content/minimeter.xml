<?xml version="1.0"?>
<bindings 
  xmlns="http://www.mozilla.org/xbl"
  xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml">
  
<binding id="meter">
  <content>

 
		<xul:vbox id="icon" style="height: 16px; width: 16px; margin-left: 0; margin-right: 0"/>
    
    <xul:label id="text" xbl:inherits="value=label" style="margin: 1px 2px 0px 0;"></xul:label>

    <xul:vbox id="bar" style="height: 16px;padding-top: 1px; " collapsed="false">        
	    <xul:hbox width="50" xbl:inherits="width=size"
	            style="margin: 3px 4px 0px 7px; height: 8px; overflow: hidden;
	            border: 1px solid #aaa; background: white; -moz-border-radius: 2.2px">
	      <xul:hbox 
	            xbl:inherits="width=bar"
	            style="background: url(chrome://minimeter/content/res/meter.png);">
	      </xul:hbox>
	    </xul:hbox>
    </xul:vbox>

  </content>

  <implementation>
    <field name="speed"/>
    <field name="step"/>
    <field name="busy"/>

    <constructor>
      <![CDATA[
      	if(this.getAttribute("toolbar")){
      		this.removeAttribute("style"); // clear the static icon
      		document.getElementById("bar").removeAttribute('collapsed'); // always meter visible
      	}
        this.value = this.getAttribute('value');
        this.label = "";
        this.busy = false;
        this.speed = 110;
        this.step = 0.1;
        this.opacity = 0.9;
        this.up = false; // is the current animation-opacity increasing

				this.showProgressmeter = true;
				this.showText = false;
				this.showIcon = false; 
				//alert("constructed");
				
				if(Minimeter.monitor != null){
					Minimeter.monitor.addListener(this);
				}

      ]]>
    </constructor>
    


    <property name="icon" onset="document.getElementById('icon').style.background = 'url(chrome://minimeter/content/res/'+ val + ') no-repeat'; " />
    <property name="label">  
    	<getter>
    		return this.getAttribute('label');
    	</getter>
    	<setter>
    		<![CDATA[
    		this.setAttribute('label', val);
    		]]>
    	</setter>
    </property>
    
		<property name="showProgressmeter" onset="document.getElementById('bar').setAttribute('hidden', !val);"/>  
		<property name="showText" onset="document.getElementById('text').setAttribute('hidden', !val);"/>  							
		<property name="showIcon" onset="document.getElementById('icon').setAttribute('hidden', !val);"/>  

    <property name="value"> 
      <getter>
        return 100 / this.getAttribute('size') * this.getAttribute('bar');
      </getter>
      <setter>
				
      	
        var r = this.getAttribute('size') / 100;
        this.setAttribute('bar', val * r);
        return val;
      </setter>
    </property>

		
    <property name="percentageLabel"> 
      <getter>
      <![CDATA[
	      	if(Minimeter.monitor.totalVolume <= 0){
	      		return "";
	      	} else {
						var remaining = ""
						if (Minimeter.monitor.usedVolume < Minimeter.monitor.totalVolume) {
							
							remaining = (Math.round((Minimeter.monitor.totalVolume - Minimeter.monitor.usedVolume)*1000)/1000);
							var remainingloc = remaining.toLocaleString();
							remaining = " (" + remainingloc + Minimeter.monitor.measure + " " + (remaining >= 2 ? Minimeter.monitor.remainings : Minimeter.monitor.remaining) + ")";
						}
	        	return (Math.round(Minimeter.monitor.usedVolume / Minimeter.monitor.totalVolume * 10000)/100).toLocaleString() + "%" + remaining;
	        }
    		]]>
      </getter>
    </property>
    
   
    <property name="textLabel"> 
      <getter>
      <![CDATA[
	      	if(Minimeter.monitor.totalVolume <= 0){
	      		return " " + parseFloat(Minimeter.monitor.usedVolume).toLocaleString() + Minimeter.monitor.measure;
	      	} else {
	        	return " " + parseFloat(Minimeter.monitor.usedVolume).toLocaleString() + " / " + parseFloat(Minimeter.monitor.totalVolume).toLocaleString() + Minimeter.monitor.measure ;
	        }
    		]]>
      </getter>
    </property>

    <method name="update">
      <parameter name="monitor"/>
      <body>
        <![CDATA[
        	if(document.getAnonymousNodes(this) == null) return; // toolbaritem removed
        	
        	this.icon = monitor.image;
        	this.setShaded(false);
					if(monitor.state ==  monitor.STATE_BUSY){
						
					  this.setBusy(true);
					}
					if(monitor.state ==  monitor.STATE_ERROR){
						this.label = "  " + Minimeter.getString("statusbar.error", "Error");
						
						this.setBusy(false);
						this.value = 0;
						this.setShaded(true);
					}
					if(monitor.state ==  monitor.STATE_DONE){
						this.label =  this.textLabel ;
						this.setBusy(false);
						this.animate(monitor.usedVolume / monitor.totalVolume * 100, monitor.newData);
					}
        ]]>
      </body>
    </method>

  
    <method name="animate">
      <parameter name="newValue"/>
      <parameter name="newData"/>
      <body>
        <![CDATA[
        	if( Minimeter.monitor.totalVolume <= 0) newValue = 0;
        	
        	document.getElementById("bar").removeAttribute('collapsed');
        	
        	if(!newData)
            this.value = newValue;
          else
          {
            this.value = 0;
            this.finish = newValue ;
            this.animCallback();
          }
        ]]>
      </body>
    </method>
    
  
    <method name="setBusy">
    	<parameter name="value"/>
      <body>
        <![CDATA[
        	if(value){
	          if(this.busy)return;
	          this.opacity = 0.9;
	          this.busy = true;
	          this.busyCallback();
          } else {
	          this.opacity = 1;
	          this.busy = false;
          }
        ]]>
      </body>
    </method>
    
    <method name="setShaded">
    	<parameter name="value"/>
      <body>
        <![CDATA[
        	var pStyle = document.getElementById("bar").childNodes[0].style;
        	if(value){
        			pStyle.border = "1px dashed #aaa";

          } else {
							pStyle.border = "1px solid #aaa";
          }
        ]]>
      </body>
    </method>

		<!-- private methods -->

    <method name="animCallback">
      <body>
        <![CDATA[
          if((++this.value + 2) < this.finish){
            window.setTimeout(
              function(x){x.animCallback();}, 20, this
            );   
          }
        ]]>
      </body>
    </method>
     
    <method name="busyCallback">
   
      <body>
        <![CDATA[

          this.style.MozOpacity = this.opacity;
          if(!this.busy) return;
          
          if(this.up) {
            this.opacity = this.opacity + this.step; 
          } else {
            this.opacity = this.opacity - this.step;
          }
          
          if(this.opacity > 0.9 || this.opacity < 0.3) { this.up = !this.up; }

          window.setTimeout(
            function(x){x.busyCallback();}, this.speed, this
          );  
  
        ]]>
      </body>
    </method>    
      
  </implementation>

</binding>
</bindings>